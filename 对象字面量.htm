<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        //创建一个对象
        // var obj =new Object();

        // 使用字面量来创建一个对象
        var obj = {};
        obj.name = "孙悟空";
        // 使用对象字面量可以在创建对象时直接定义对象的属性
        // 语法 {属性名： 属性值，属性名：属性值...};

        /*对象字面量的属性名可以加引号也可以不加，建议不加，
        如果要是有一些特殊的名字，则必须加引号

        属性名和属性值是一组一组的名值对结构
        名和值之间使用：连接，多个名值之间使用，隔开
        如果一个属性值之后没有其他属性值了，就不要写，
        */

        /*函数
        函数也是也一个对象
        函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）
        函数可以保存一些代码在需要的时候调用
        */
        // 创建一个函数对象
        var fun = new Function("console.log('hello!');");
        // fun();
        fun.hello = "你好！";
        console.log(fun.hello);
        // 我们在实际开发中很少使用构造函数
        /*
        方法一：
        使用函数声明来创建一本函数
        语法  function 函数名（[形参1，形参2，...]){

        }
        方法二：使用函数表达式来创建函数
        var 函数名 = function（[形参1，形参2，...]）{

        }
        
        函数参数
        调用函数时不会检查实参的类型
        所以要注意，是否可能会接收到非法的参数，如果有可能有可能则需要对参数进行类型的检查
        调用函数第，解析器也不会检查参数的数量，多余实参不会被赋值
        如果是实参的数量少于形参的数量，则没有对应的实参的新参是undefined
        函数的而是餐可以使任意的数据类型
        */


        /*
        返回值
        可以使用return来设置函数的返回值
        语法 ：
           return 值
        return后的值将会作为函数的执行结果返回
        可以sing一一个变量来接收该结果
        如果函数中return值后面不写内容，返回undefined
        如果函数中不写return，也会返回undefined
        return后面可以跟任意类型的值
        return后面的语句不再执行


        函数参数
        实参可以是任意数据类型，也可以是对象 
        可以将属性值在对象中定义，然后调用函数实参为该对象
        实参也可以是函数
        mianji()
        调用函数
        相当于实验函数的返回值
        mianji
        函数对象
        相当于直接使用函数的对象

        函数返回值类型
        使用return可以直接结束整个函数
        返回值可以使任意的数据类型，也可以是对象和一个函数

        立即执行函数
        函数定义完立即被调用
        立即执行函数往往只会调用一次
        (function(){
            alert（"我是一个匿名函数");
        })();
        */
    </script>
</head>

<body>

</body>

</html>